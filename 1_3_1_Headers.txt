
******************************* HEADERS ********************************************

Заголовки (Headers) носят служебный характер. В них указывается информация для корректной работы системы.

Заголовки разделяются на 4 ТИПА:
	1) Заголовки запросов (REQUEST HEADERS) - используются при отправке запроса на сервер. Служат для передачи дополнительной, уточняющей и служебной информации.
Некоторые заголовки, например, User-Agent, отправляются только в request headers.

	2) Заголовки ответов (RESPONSE HEADERS) - используются при отправке ответа от сервера к клиенту. Также служат для передачи дополнительной, уточняющей и служебной информации.
Некоторые заголовки могут быть отправлены только в response headers. Например, Set-cookie, которые сервер генерирует и отправляет клиенту для того, чтобы клиент сохранил данные куки и при последующих запросах присылал их для идентификации и аналитических целей.

	3) Основные заголовки (GENERAL HEADERS) - это такие заголовки, как Date, Connection и т.п. Данная группа заголовков не описывает содержимое запроса и является общей для клиента и сервера.

	4) Заголовки сущности (ENTITY HEADERS) - это заголовки, служащие для описания содержимого запросов. Entity headers отправляются вместе с request headers или response headers.
Большинство entity headers начинаются с Content- (например: Content-Length, Content-Language, Content-Type, Content-Location, Link и т.д.)

На практике, как правило, разделяют запросы на request headers и response headers.

ЗАГОЛОВКИ представляют из себя набор КЛЮЧЕЙ И ЗНАЧЕНИЙ (key: value).


Разберем некоторые РАСПРОСТРАНЕННЫЕ ХИДЕРЫ.

										===== USER-AGENT =====

USER-AGENT - отправляет серверу информацию о том, С КАКОГО УСТРОЙСТВА ИЛИ БРАУЗЕРА осуществляется запрос.

ПРИМЕР:
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36.
Данная информация может использоваться в аналитических целях. Также благодаря этому заголовку система определяет устройство и предлагает соответствующую версию программы, подходящую для ОС.


										===== HOST =====
										
HOST - указывает, К КАКОМУ КОНКРЕТНОМУ ВЕБ-САЙТУ на HTTP-сервере следует обратиться.
На одном сервере может быть размещено множество различных веб-сайтов, и заголовок Host помогает серверу определить, к какому из них обращается запрос. Host является обязательным для HTTP версии 1.1 и выше.

ПРИМЕР:
Host: www.youtube.com
Host: localhost:8000


										===== REFERER и REFERRER-POLICY =====
										
REFERER — используется ДЛЯ УКАЗАНИЯ ИСТОЧНИКА, ОТКУДА БЫЛ ОТПРАВЛЕН текущий запрос.
Если, например, пользователь кликнет на логотип Stepik в верхнем левом углу какой-либо страницы, переходя на главную, к запросу будет добавлен заголовок вида Referer: https://stepik.com/lesson....

REFERRER-POLICY — определяет, КАКОЙ ИМЕННО ИНФОРМАЦИЕЙ ЗАПОЛНЯТЬ заголовок Referer. Это может быть, например, только URL или полный URI.
Этот заголовок важен с точки зрения безопасности и конфиденциальности, так как позволяет контролировать, какие данные и в каких обстоятельствах будут передаваться в Referer.
Referrer-policy диктует, КАКИЕ ДАННЫЕ И В КАКИХ СЛУЧАЯХ должны передаваться в Referer.

ПРИМЕРЫ:
Referrer-Policy: no-referrer - заголовок Referer не указывается
Referrer-Policy: no-referrer-when-downgrade - заголовок Referer не указывается при переходе с HTTPS на HTTP
Referrer-Policy: origin - в  Referer указывается только URL
Referrer-Policy: origin-when-cross-origin - при переходах внутри одного ресурса по HTTPS в Referer указывается URI. В иных случаях - только URL.
Referrer-Policy: same-origin - при переходах внутри одного ресурса в Referer указывается URI. При переходах на другой ресурс Referer не передается. 
Referrer-Policy: strict-origin - при переходах с HTTPS на HTTP Referer не передается. В ином случае передается URL.
Referrer-Policy: strict-origin-when-cross-origin - при переходах внутри одного ресурса по HTTPS передается URI. При переходах по HTTPS на сторонние ресурсы - передается URL. При переходе на сторонний ресурс с HTTPS на HTTP - Referer не передается.
Referrer-Policy: unsafe-url - всегда передается URI, вне зависимости от безопасности ресурса.


										===== ACCEPT =====
										
ACCEPT - позволяет клиенту указать, КАКИЕ ТИПЫ МЕДИАФАЙЛОВ он может ПРИНЯТЬ и ОБРАБОТАТЬ. В данном заголовке могут быть указаны несколько типов, перечисленные через запятую.

ПРИМЕРЫ:
Accept: */* - клиент может принять и обработать любой формат.
Accept: text/html - клиент может принять и обработать только формат HTML
Accept: text/html, application/json - клиент может принять и обработать формат HTML и JSON


										===== AUTHORIZATION =====
										
AUTHORIZATION - используется для ИДЕНТИФИКАЦИИ ПОЛЬЗОВАТЕЛЯ. Является УНИКАЛЬНЫМ для каждого пользователя, выдается системой после успешной идентификации пользователя.
Хранится НА СТОРОНЕ КЛИЕНТА и отправляется серверу для аутентификации. Бывают разные способы аутентификации.

ПРИМЕР:
Authorization: Bearer 12iDASnf_dsASk32...


										===== SET-COOKIE =====
										
SET-COOKIE - СЕРВЕР генерирует куки и ОТПРАВЛЯЕТ ИХ КЛИЕНТУ, чтобы клиент хранил их и отправлял при последующих запросах. Куки передаются в формате name=value.
Куки передаются вместе с запросом в заголовке Cookie для поддержания доступа клиента к ресурсу либо для хранения предпочтений на сайте или отслеживания клиентской сессии.

ПРИМЕР:
Set-Cookie: NIm=NOvTiKlzkb_PPzaFOwA40FxDY8_3qtOKZhY;
Set-Cookie: csrftoken=un151mMlOp38;

У заголовка Set-Cookie, существуют АТРИБУТЫ служащие для УПРАВЛЕНИЯ КУКАМИ.
Рассмотрим РАСПРОСТРАНЕННЫЕ АТРИБУТЫ:
	- Expires=<дата и время> - устанавливает максимальную дату и время жизни куки.
	- Max-Age=<кол-во секунд> - устанавливает максимальное время жизни кук в секундах. Имеет приоритет перед Expires.
	- Domain=<доменное имя> - указывает на какой хост должны отправляться куки.
	- Path=</эндпоинт> - указывает по какому эндпоинту должны отправляться куки. Если значение Path=/, значит куки отправляются по всем эндпоинтам.
	- Secure - означает, что куки могут отправляться только на ресурс использующий защищеный протокол HTTPS.
	- HttpOnly - предназначен для защиты от кражи кук вредоносным скриптом JavaScript. Блокирует доступ JavaScript к кукам. 
	- SameSite=Strict - куки передаются только при переходах внутри одного и того же ресурса. Например: если vk.com отправил нам куки с данным атрибутом, и мы переходим с google.com на vk.com, то при этом переходе куки не будут отправлены. Но при последующих переходах внутри vk.com куки будут прилагаться к запросам.
	- SameSite=Lax - куки передаются при межсайтовых переходах по прямой ссылке. Например, если переходим с google.com на vk.com, куки будут отправлены. Отличие атрибута SameSite=Lax в том, что куки отправляются только при переходе по прямой ссылке. Так, если с google.com в разделе "картинки" мы скачиваем картинку с другого сайта, куки передаваться не будут. В случае отсутствия атрибута SameSite, по умолчанию с 2019 года применяется значение SameSite=Lax.
	- SameSite=None; Secure - данный атрибут снимает ограничения по передаче куки. Данный атрибут может передаваться только по защищенному протоколу HTTPS и с атрибутом Secure, который мы рассматривали выше.

ПРИМЕР (с атрибутами):
Set-Cookie: NIm=NOvTiKlzkb_PPzaFOwA40FxDY8_3qtOKZhY; SameSite=None; Secure
Set-Cookie: csrftoken=un151mMlOp38; Max-Age=360000; SameSite=Strict; Domain=vk.com; HttpOnly

Примечания:
	- Куки отправленные сервером без атрибута Expires или Max-Age - являются сессионными и существуют во время текущей сессии, пока открыт браузер.
	- Куки в которых присутствует атрибут Expires или Max-Age - являются постоянными.


										===== COOKIE =====
										
COOKIE — данный заголовок используется клиентом ДЛЯ ОТПРАВКИ СЕРВЕРУ КУК, полученных через Set-Cookie.
Заголовок содержит в себе одну или несколько пар в формате name=value. Пары кук разделяются символом ;.

ПРИМЕР:
Cookie: NIm=NOvTiKlzkb_PPzaFOwA40FxDY8_3qtOKZhY; csrftoken=un151mMlOp38;


										===== CONTENT-TYPE =====
										
CONTENT-TYPE - используется для информирования о ФОРМАТЕ СОДЕРЖИМОГО BODY, отправляемого на сервер или получаемого от сервера.

ПРИМЕР:
Content-Type: application/json
Content-Type: application/xml
Content-Type: application/x-www-form-urlencoded
Content-Type: text/html


										===== CACHE-CONTROL =====

КЭШ — это буфер с быстрым доступом.

Спецификация HTTP 1.1, ради безопасности и конфиденциальности, разделяет кэши на ДВЕ ГРУППЫ: общие (SHARED) и необщие (NON-SHARED).

SHARED — это кэши, к которым есть доступ у БОЛЬШОГО КОЛИЧЕСТВА ЛЮДЕЙ (например: кэши провайдеров, кэши компаний и др.)
Общий кэш выступает промежуточным звеном между клиентом и сервером, фактически являясь прокси-сервером.

NON-SHARED — это кэш, доступ к которому имеет ТОЛЬКО ОДИН ПОЛЬЗОВАТЕЛЬ (например: кэш браузера).


В протоколе HTTP существует несколько ХИДЕРОВ, предназначенных для УПРАВЛЕНИЯ КЭШИРОВАНИЕМ:
	- CACHE-CONTROL — ключевой и основной заголовок для управления кэшем. Появился в версии HTTP 1.1 и имеет приоритет перед Expires и Pragma.
	- EXPIRES — предшественник Cache-Control. Он менее гибкий и, в основном, используется для обратной совместимости со старыми браузерами.
	- PRAGMA — устаревший заголовок, который уже редко используется в современных приложениях.

Хидер Cache-Control является ОБЩИМ (GENERAL header). Управление кэшированием с его помощью происходит как при запросах со стороны клиента, так и при ответах со стороны сервера.

АТРИБУТЫ Cache-Control, в клиентских ЗАПРОСАХ:
	- max-age=<секунды> - клиент готов принять ответ, который можно закэшировать на указанное время.
	- max-stale=<секунды> - клиент готов принять устаревший ответ, в котором время устаревания не превышает указанное количество секунд. Данный атрибут может быть полезен когда сервер не доступен.
	- min-fresh=<секунды> - клиент готов принять ответ, который будет актуальным указанное кол-во секунд.
	- no-cache - перед использованием закэшированных данных, кэш должен проверить актуальность на сервере.
	- no-store - запрет на кэширование каких-либо данных о запросе и ответе.
	- no-transform - запрет на преобразование(конвертацию) данных на стороне кэша.
	- only-if-cached - клиент готов получить любую закэшированную информацию. Данный атрибут может быть полезен, когда сервер не доступен.

АТРИБУТЫ Cache-Control, в ОТВЕТАХ от сервера:
	- public - данные можно закэшировать в любом кэше (в общем кэше и кэше браузера).
	- private - данные можно закэшировать только в приватном кэше(в кэше браузера).
	- max-age=<секунды>- сервер указывает, на какое время кэшируются данные с момента создания ответа. По сути данным атрибутом, сервер обозначает срок свежести закэшированных данных. Обратите внимание, что время кэширования начинается не с момента получения, а с момента создания контента.
	- s-max-age - аналогичен max-age, за исключением того, что предназначен для общих кэшей. Если присутствуют одновременно оба атрибута, max-age - будет определять время свежести в кэше браузера, а s-max-age - будет определять время свежести в общем кэше.
	- no-cache - перед использованием закэшированных данных, кэш должен проверить актуальность на сервере.
	- no-store - запрет на кэширование каких-либо данных о запросе и ответе.
	- no-transform - запрет на преобразование(конвертацию) данных на стороне кэша.
	- must-revalidate - после истечения срока свежести, кэш обязан проверить актуальность данных у сервера.
	- proxy-revalidate - аналогичен предыдущему, за исключением того, что распространяется на общие кэши.



										===== CONNECTION =====
										
CONNECTION - служит для управления соединением между клиентом и сервером.

ПРИМЕР:
Connection: keep-alive - соединение между клиентом и сервером не прерывается.
Connection: close - говорит о том, что сервер или клиент хотят прекратить связь.


										===== ACCEPT-LANGUAGE =====

ACCEPT-LANGUAGE - представляет информацию о языке, которому отдаёт предпочтение пользователь.

ПРИМЕР:
Accept-Language: ru-RU, ru, en-US, en — система выберет язык в порядке убывания.
Сначала система попробует отобразить информацию на русском языке. Если не удастся, предоставит информацию на английском языке.
Если и на английском языке не удастся, в этом случае предоставит язык, установленный по умолчанию.
