==================== Архитектурный стиль REST =============================

REST расшифровывается как "Representational State Transfer" или "передача самоописываемого состояния".
REST представляет собой НАБОР ПРАВИЛ и ограничений для проектирования и разработки ресурсов.


REST API или RESTful - это ресурс спроектированный по принципам архитектурного стиля REST.

Иначе говоря REST API или RESTful - это конкретная реализация, а REST - парадигма.

Архитектурный стиль REST описывает, как эффективно спроектировать ресурс, используя всю мощь протокола HTTP.
REST базируется на протоколе HTTP.

В архитектурном стиле REST, всего 6 ПРИНЦИПОВ:
	1) Клиент-серверная архитектура.
	2) Отсутствие состояния у сервера (stateless).
	3) Кэширование.
	4) Единообразие интерфейса.
	5) Многоуровневость системы.
	6) Код по требованию (не обязательный принцип).


КЛИЕНТ-СЕРВЕРНАЯ АРХИТЕКТУРА
	Позволяет РВАЗДЕЛИТЬ РОЛИ обязанности и функции системы.
	Есть клиент, есть сервер, есть база данных - каждое из этих звеньев преследует свою цель.
	Клиент-серверная архитектура позволяет масштабировать ресурс.


ОТСУТСТВИЕ СОСТОЯНИЯ У СЕРВЕРА
	Данный принцип подразумевает, что СЕРВЕР НЕ ХРАНИТ информацию О КЛИЕНТЕ, а лишь обрабатывает и возвращает клиенту ответ.
	Всю необходимую информацию клиент хранит на своей стороне и отправляет ее серверу при каждом запросе.


КЭШИРОВАНИЕ
	Кэш - это МИНИ БАЗА ДАННЫХ (папка с копиями данных), в которую помещаются данные,
	которые, как правило редко обновляются и нет необходимости каждый раз запрашивать одну и ту же информацию у сервера.
	Данная технология позволяет значительно УСКОРИТЬ ВРЕМЯ ОТВЕТА от сервера, УМЕНЬШИТЬ НАГРУЗКУ на сервер,
	уменьшить затраты на базах данных, если плата взымается за пропускную способность БД.


ЕДИНООБРАЗИЕ ИНТЕРФЕЙСА
	Интерфейс - является МЕСТОМ СОПРИКОСНОВЕНИЯ двух или более, независимых объектов.
	Интерфейс - это совокупность средств, способов и возможностей взаимодействия двух и более программ.
	В контексте клиент-серверной архитектуры, мы однозначно можем говорить о том, что клиент и сервер -
	это две разные и независимые программы, которые работают вместе, благодаря АPI(Application Programming Interface). 
	Единообразие интерфейса = Единообразие API

Принцип единообразия интерфейса, накладывает 4 ОГРАНИЧЕНИЯ

1. ИДЕНТИФИКАЦИЯ РЕСУРСОВ
	Все ресурсы в системе должны быть УНИКАЛЬНО ИДЕНТИФИЦИРОВАНЫ с помощью URI (унифицированный идентификатор ресурса).
	Это позволяет обращаться к каждому ресурсу как к отдельному объекту и взаимодействовать с ним через определённый набор операций.

2. МАНИПУЛИРОВАНИЕ РЕСУРСАМИ ЧЕРЕЗ ПРЕДСТАВЛЕНИЯ
	Клиент работает с ресурсами, взаимодействуя с их представлениями (например, в формате JSON или HTML).
	Клиент может читать и изменять эти представления, а сервер использует их для обновления или изменения соответствующих ресурсов.

3. САМООПИСЫВАЮЩИЕ СООБЩЕНИЯ
	Каждое сообщение (запрос или ответ) содержит всю необходимую информацию для его обработки.
	Это упрощает взаимодействие между различными компонентами системы, так как каждая часть системы может понимать и обрабатывать сообщение независимо от других частей.

	К примеру, когда Вы просматриваете фотографии друга в социальной сети, Вы отправляете запрос серверу, который описывает какое действие Вы желаете исполнить:
	- URI для идентификации ресурса
	- HTTP метод, для определения типа запроса
	- Куки и токены для установления наличия прав на запрашиваемое действие и т.д.
	- Это обеспечивает stateless подход (сервер не хранит состояние)

4. ГИПЕРМЕДИА КАК ДВИГАТЕЛЬ СОСТОЯНИЯ ПРИЛОЖЕНИЯ (HATEOAS)
	Сервер в ответе представляет ссылки на связанные ресурсы. Эти ссылки являются нитями, связывающими Веб вместе,
	позволяя пользователям переходить между информацией и приложениями осмысленным и направленным образом.
	Наличие или отсутствие ссылки на странице является важной частью текущего состояния ресурса.

	К примеру Вам друг отправил ссылку на книгу, Вы перешли по ссылке и попали на сайт онлайн-библиотеки, на конкретную книгу.
	Помимо ссылок, для дальнейшего взаимодействия с книгой (открыть книгу/ купить книгу/ добавить книгу в избранное),
	сервер также представляет ссылки на связанные ресурсы, например на автора книги/ похожие книги/ вместе с этим покупают... и т.д.


МНОГОУРОВНЕВОСТЬ СИСТЕМЫ
	Многоуровневая система подразумевает иерархическую систему уровней.
	При обращении клиента к серверу наш сервер может обратиться к вышестоящему серверу,
	который, в свою очередь, может обратиться к следующему вышестоящему серверу и т. д.
	При этом область видимости каждого компонента ограничивается уровнем слоя, с которым он взаимодействует.

	Во-первых, наш сервер не может "перепрыгнуть" через свой вышестоящий сервер к другому, потому что он не знает о его существовании.
	Во-вторых, когда он обращается к вышестоящему серверу, то для последнего он является клиентом.
	И в-третьих, сервер не может знать, перенаправил ли вышестоящий сервер запрос дальше или обработал его самостоятельно. Таким же образом, клиент, который направил запрос на сервер, не знает, как сервер обработал этот запрос.


КОД ПО ТРЕБОВАНИЮ (необязательный принцип)
	Код по требованию — это код, передаваемый сервером клиенту для выполнения тех или иных функций.
	Если говорить о сайтах, речь идет о JavaScript (языке программирования для веб-сайтов).
	Браузер получает его от сервера и выполняет внутри себя.
	Например, если мы в форме регистрации допустили ошибку, нам всплывает подсказка (валидация) о допущенной ошибке, ее характере и т. д.


