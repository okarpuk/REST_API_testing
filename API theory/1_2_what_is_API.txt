API (Application Programming Interface) - это описание СПОСОБОВ ВЗАИМОДЕЙСТВИЯ одной компьютерной программы с другими.
Обычно входит в описание какого-либо интернет-протокола (например, SCIM), программного каркаса (фреймворка) или стандарта вызовов функций операционной системы.


									****************** КЛИЕНТ-СЕРВЕРНАЯ АРХИТЕКТУРА ****************

КЛИЕНТ-СЕРВЕРНАЯ АРХИТЕКТУРА - это модель взаимодействия компонентов системы, где КЛИЕНТ (потребитель услуг) отправляет ЗАПРОСЫ СЕРВЕРУ (поставщику услуг),
который в свою очередь ОБРАБАТЫВАЕТ эти запросы и ВОЗВРАЩАЕТ РЕЗУЛЬТАТЫ обратно клиенту.

В этой архитектуре выделяются 3 ОСНОВНЫХ КОМПОНЕНТА:
- Клиент
- Сервер
- База данных

КЛИЕНТ – это та часть ПО, с которой взаимодействует пользователь (формально - клиентом является любая программа способная отправлять запросы на сервер).

СЕРВЕР – это компонент ПО, ответственный за ЛОГИКУ ОБРАБОТКИ ЗАПРОСОВ от клиента.

БАЗА ДАННЫХ — это компонент ПО, отвечающий за ХРАНЕНИЕ ДАННЫХ. База данных получает от сервера запросы и возвращает ответы (реляционная база данных - посредством языка SQL).

2 ОСНОВНЫХ ТИПА баз данных:
- РЕЛЯЦИОННЫЕ - данные хранятся в таблицах и строках. Взаимодействие осуществляется при помощи SQL.
- НЕРЕЛЯЦИОННЫЕ (NoSQL) - данные могут храниться в различных форматах ("ключ-значение", документные, графовые и другие).

												
												**************** HTTP ***************
												
Протокол прикладного уровня HTTP (Hypertext Transfer Protocol) - изначально протокол использовался для передачи данных в формате гипертекста.
На сегодняшний день HTTP протокол может служить "транспортом" для других протоколов, например, для SOAP.

В настоящее время существует множество протоколов и архитектурных стилей взаимодействия компонентов.
Самый популярный подход к построению сайтов, приложений и других ресурсов - это архитектурный стиль REST.


SOAP - это протокол обмена структурированными сообщениями.
SOAP поддерживает только формат сообщений XML.

REST - это архитектурный стиль, по сути набор принципов и правил по проектированию ресурса.
REST поддерживает разные форматы обмена данными, но самый распространенный - это JSON.

Преимущества REST: гибкость, простота, легковесность/скорость передачи данных.
Преимущества SOAP: за счет строгих наборов правил (стандартизации), является более надежным.


									*********************** ИНТЕРФЕЙСЫ **********************

ИНТЕРФЕЙС - это совокупность способов, средств, правил и возможностей взаимодействия кого-либо или чего-либо с кем-либо или чем-либо.

Примеры интерфейсов:
GUI (Graphical User Interface - это графический способ взаимодействия пользователя с сайтом или приложением.
CLI (Command Line Interface) — с командной строкой в Windows или с терминалом для Linux-систем и MacOS.

API — это также своего рода интерфейс


									********************** ВИДЫ API ************************

- ВНУТРЕННЕЕ API - используется для ВЗАИМОДЕЙСТВИЯ КОМПОНЕНТОВ программы друг с другом, недоступен пользователю напрямую, используется разработчиками для реализации корректной и оптимальной работы ПО.

- ВНЕШНЕЕ API - используется для реализации ВЗАИМОДЕЙСТВИЯ ПОЛЬЗОВАТЕЛЯ С СИСТЕМОЙ (Например: для регистрации пользователя реализовыван необходимый эндпоинт, по которому пользователь отправляет данные для регистрации.

- ПАРТНЕРСКОЕ API - используется для эффективного ВЗАИМОДЕЙСТВИЯ БИЗНЕС-ПАРТНЕРОВ. Можно интегрировать в систему любую функцию по соглашению сторон (например: Яндекс.Маркет позволяет добавить практически любую свою функциональность их платформы посредством API).


									********************** ТИПЫ API ************************

API могут быть классифицированы ПО СТИЛЮ их архитектуры или ПО используемым ПРОТОКОЛАМ.

Два ОСНОВНЫХ СТИЛЯ архитектуры в веб-разработке - это:
- RPC (Remote Procedure Call, или Удаленный вызов процедур) - это класс технологий, который позволяет одному компьютеру вызывать код на другом компьютере, как если бы это был локальный вызов функции.
- REST (Representational State Transfer, или Передача состояния представления) - это ресурсо-ориентированный архитектурный стиль, который использует стандартные HTTP-методы для чтения, создания, обновления, удаления ресурсов и URI для идентификации ресурсов.

SOAP (Simple Object Access Protocol, или Простой протокол доступа к объектам) - это один из протоколов, который был разработан для выполнения RPC-вызовов, и он обеспечивает обмен сообщениями между веб-службами.


REST API или RESTful API - ресурс спроектированный согласно принципам архитектурного стиля REST.
RPC API - ресурс использующий удаленный вызов процедур (RPC).
SOAP API - ресурс использующий протокол SOAP.




