
					********************** БЕЗОПАСНЫЕ И ИДЕМПОТЕНТНЫЕ МЕТОДЫ ******************************


ИДЕМПОТЕНТНЫЕ МЕТОДЫ - это методы, которые либо НЕ ИЗМЕНЯЮТ состояние в базе данных, либо ИЗМЕНЯЮТ состояние ТОЛЬКО ПРИ ПЕРВОМ запросе.
В случае повторной отправки идентичного запроса, состояние в базе данных не изменяется.
Идемпотентными методами являются: GET, PUT, DELETE, HEAD и OPTIONS.

БЕЗОПАСНЫЕ МЕТОДЫ - это методы, которые НЕ ИЗМЕНЯЮТ состояние в базе данных (read only методы).
Все безопасные методы также являются идемпотентными.
Безопасными методами являются: GET, HEAD и OPTIONS.

ОТЛИЧИЕ идемпотентных методов от безопасных заключается в том, что:
	- Безопасные методы не меняют состояние базы данных
	- Идемпотентные методы могут внести изменения при первом запросе, но последующие идентичные запросы уже не будут менять состояние в базе данных.


										===== МЕТОД GET =====
										
МЕТОД GET - используется для ПОЛУЧЕНИЯ информации о ресурсе.

GET запрос может отправляться ВМЕСТЕ с query-параметрами. Query-параметры служат для фильтрации и сортировки данных.
Если в нашем запросе НЕСКОЛЬКО разных query-параметров, мы РАЗДЕЛЯЕМ их символом &.

Query-параметры представляются В ФОРМАТЕ key=value
Например: ?limit=10&offset=3 (limit - это ключ, 10 - это значение. offset - ключ, 3 - значение)

Также стоит запомнить, что методы GET и HEAD - являются кэшируемыми. 


										===== МЕТОД POST =====
										
МЕТОД POST - предназначен для СОЗДАНИЯ новых ресурсов и ПЕРЕДАЧИ данных.
Отличие POST от PUT заключается в том, что POST не является идемпотентным.
Если мы трижды отправим запрос методом POST для оформления заказа, он создаст 3 заказа. В то время как метод PUT каждый раз будет заменять уже созданный заказ.
Обычно именно метод POST применяется для добавления новых данных в базу данных.

Для ПЕРЕДАЧИ ДАННЫХ в методе POST используется ТЕЛО запроса (BODY). Эти данные могут отправляться в различных форматах (JSON; XML; text; бинарные файлы (изображения, видео, аудиофайлы и т.д.))

Резюме:
	- Для создания новых ресурсов и для передачи данных - следует использовать метод POST.
	- В отличие от GET, метод POST использует тело (body), которое отправляется на сервер.
	- POST не является идемпотентным, в отличие от методов GET, PUT и DELETE.
	- В теле запроса можно передавать информацию в разных форматах, хотя наиболее распространенным является формат JSON.
	- POST может быть кэширован при определенных условиях, хотя такая практика редко используется.


										===== МЕТОДЫ PUT и PATCH =====
										
Для ОБНОВЛЕНИЯ информации уже СУЩЕСТВУЮЩЕГО объекта часто используется метод PUT.
Также этой цели может служить метод PATCH, но принципы их работы различаются.

Метод PUT обновляет ресурс ПОЛНОСТЬЮ.
Метод PATCH вносит ЧАСТИЧНЫЕ изменения в существующем ресурсе, ЗАТРАГИВАЯ ТОЛЬКО УКАЗАННЫЕ поля, переданные в теле запроса.

Метод PUT является идемпотентным. Это означает, что если мы отправим один и тот же запрос PUT десять раз, результат будет одинаковым.
При первом вызове PUT внесет изменение в базу данных, а последующие вызовы будут заменять тот же объект теми же данными.

С другой стороны, метод PATCH может использоваться не только для обновления, но и для добавления данных.
В случае многократного вызова одинакового запроса метод PATCH приведет к внесению соответствующего количества изменений в базу данных.


Резюме:
	- PUT меняет объект целиком.
	- PATCH вносит изменения в существующий объект, меняя только указанные в body поля.
	- PUT по определению идемпотентный.
	- PATCH может быть идемпотентным, но может и не являться таковым. Несмотря на то, что PATCH может являться идемпотентным, но не всегда является таковым - PATCH относиться к категории неидемпотентных.
	- PUT более распространен, чем PATCH.
	- При внесении изменений в одно из нескольких полей методом PUT, для корректной замены данных, следует прописывать все остальные поля с нужными значениями.
	- Метод PATCH, как и метод POST может быть кэширован при определенных условиях, но это редко используется. В свою очеред PUT не кэшируется.


											===== МЕТОД DELETE =====
											
Если нам необходимо УДАЛИТЬ неправильно сформированный заказ в интернет-магазине, пользователя в социальной сети или фотографию в Instagram, мы используем метод DELETE.
Метод DELETE может иметь тело запроса, но также может и не иметь, но как правило, тело запроса в методе DELETE не используется.

После УСПЕШНОГО выполнения метода DELETE мы можем получить различные СТАТУС КОДЫ и тела ответа от сервера:
	- 200 OK указывает на успешное выполнение удаления, и ответ содержит тело.
	- 202 Accepted используется, если удаление будет успешным, но еще не завершено.
	- 204 No Content означает, что удаление было выполнено, но тело ответа отсутствует.
	- 401 Unauthorized возникает, если попытка удаления выполняется без авторизации.
	- 403 Forbidden указывает на отсутствие прав на выполнение данной операции.
	- 404 Not Found возникает, если попытка удаления направлена на несуществующий или ненайденный ресурс.
	- Как и метод PUT, метод DELETE не поддерживает кэширование.


