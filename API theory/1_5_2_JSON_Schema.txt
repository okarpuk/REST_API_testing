
========================================================= JSON Schema ========================================================================


JSON SCHEMA — это ДОКУМЕНТ, который описывает КАКИМ ДОЛЖЕН БЫТЬ JSON при отправке запроса / получении ответа от сервера.

JSON Schema ВЫГЛЯДИТ ТАКЖЕ, как и JSON. В нём используется ТОТ ЖЕ СИНТАКСИС и те же типы данных. JSON Schema также оборачивается в фигурные скобки.

В целом, JSON Schema служит для ПРОВЕРКИ КОРРЕКТНОСТИ ОТВЕТА сервера (валидации).
Она проверяет полученный JSON на наличие правильных данных, соответствующих типов данных, а убеждается в наличии всех обязательных полей и т. д.

Основные КЛЮЧЕВЫЕ СЛОВА в JSON Schema:
	- TYPE - для определения типа данных поля или объекта.
	- PROPERTIES - для перечисления возможных полей в JSON и определения требования к ним.
	- ITEMS - для описания требований к массиву.
	- REQUIRED - для перечисления обязательных полей в JSON.
	- ENUM - для перечисления возможных значений у конкретного поля.


************************************************************* TYPE ***************************************************************************

Ключевое слово TYPE используется для ОПРЕДЕЛЕНИЯ ТИПА ДАННЫХ у поля или объекта.

К примеру, дан JSON:
	{
    	"name": "Alex"
	}


Для валидации данного JSON воспользуемся следующей JSON SCHEMA:
	{
    	"type": "object",                // документ, который мы валидируем является JSON, т.е. объект 
    	"properties": {                  // properties, служит для перечисления возможных полей в JSON
        	"name": {"type": "string"}   // ожидается, что у поля name, ТИП данных будет STRING
    	}
	}


1) Объявляем "type": "object", чтобы валидатор понимал, что проверяемый данный документ ЯВЛЯЕТСЯ ОБЪЕКТОМ.
2) В properties перечисляются ПОЛЯ, которые могут присутствовать в JSON.
   Здесь мы записали поле name и выставили требование к полю {"type": "string"} означающее, что поле name может являться ТОЛЬКО STRING.
   Значением поля name является вложенный объект {"type": "string"}. Внутри данного вложенного объекта выставляются требования к полю name.


У ключевого слова TYPE, могут быть следующие ЗНАЧЕНИЯ:
	- {"type": "string"} - поле должно являться строкой.
	- {"type": "number"} - поле должно являться числом.
	- {"type": "integer"} - поле должно являться целым числом.
	- {"type": "array"} - поле должно являться массивом.
	- {"type": "boolean"} - поле должно являться булевым значением.
	- {"type": "null"} - поле должно являться null.
	- {"type": "object"} - поле должно являться объектом.

Для объявления НЕСКОЛЬКИХ ДОПУСТИМЫХ ТИПОВ данных для одного поля, используется следующий синтаксис:
	{"type": ["string", "null"]}.

В этом случае значением поля type является МАССИВ С перечисленными возможными ТИПАМИ данных для поля.



************************************************************* PROPERTIES ***************************************************************************






















