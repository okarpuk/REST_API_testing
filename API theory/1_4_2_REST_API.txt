
========================== REST API ============================

REST API прекрасно подходит для использования в большинстве проектов.
Его высокая гибкость, быстрота и простота делают его предпочтительным выбором.

SOAP обладает большей надежностью и стандартизацией,
что делает его довольно частым выбором в проектах банковского и финансового формата.


REST не является строгим протоколом.
REST накладывает определенные ограничения при проектировании ресурсов,
однако то, что касается лучших практик, в большинстве случаев носит рекомендательный характер.


ВАЖНЫЕ практические РЕКОМЕНДАЦИИ по безопасности, масштабируемости и другим аспектам REST:

1. В эндпоинтах НЕ СЛЕДУЕТ указывать методы HTTP. Лучше использовать существительные вместо глаголов.
	
	Примеры ХОРОШИХ эндпоинтов:
		/users
		/users/{id}

	Примеры ПЛОХИХ эндпоинтов:
		/GetUser
		/UpdateUser
		/DeleteUser

		Обоснование:
	- В REST принято идентифицировать, сортировать, фильтровать ресурсы в URI,
	  а желаемые действия над ресурсом определять HTTP методами.
	
		К примеру:
	- желаем получить информацию о пользователе - отправляем GET запрос по эндпоинту users/123.
	- желаем создать пользователя - отправляем POST запрос по эндпоинту /users
	  и в body указываем необходимые для регистрации поля.


2. ИНСТРУМЕНТЫ ведения документации.

		Лучшая практика:
	- Ведение документации на ресурсах, таких как Swagger.
	- Регулярное обновление документации для поддержания её актуальности и полноты.

		Плохая практика:
	- Отсутствие документации на ресурсах, таких как Swagger.
	- Наличие документации на ресурсах вроде Swagger, которая при этом неактуальна, некорректна, неполна или не обновляется.
	
		Обоснование:
	  Отсутствие актуальной документации или её неактуальность:
	- Серьезно усложняет проведение тестов, в том числе тестирование API.
	- Усложняет разработку клиентской части приложения, приводит к допущению большего количества багов
	  и замедляет процесс разработки в целом.
	- Если в проекте предусмотрен партнерский API, наши партнеры могут столкнуться с проблемами
	  при интеграции наших ресурсов в свои системы из-за недостаточного качества документации.


3. Базовая БЕЗОПАСНОСТЬ пользователей.
		
		Лучшие практики:
	- Использовать защищенный протокол HTTPS вместо незащищенного HTTP.
	  Защита данных пользователей должна быть на первом месте при взаимодействии с ресурсом.
	- Использовать SSO протоколы, такие как OAuth2.0 или OpenID. Это безопасный и удобный способ аутентификации для пользователей.
	- НЕЛЬЗЯ передавать чувствительные и конфиденциальные данные такие как логины, пароли, токены в query-параметрах.
	  Подобные данные должны передаваться либо в хидерах, либо в теле запроса.

		Плохие практики:
	- Игнорировать использование защищенного протокола HTTPS.
	- Применять протокол HTTPS только на отдельных эндпоинтах, а не на всех.
	- Пренебрегать использованием SSO.
	- Передавать чувствительные и конфиденциальные данные в URI (в query-параметрах).
	Пример: GET https://example.com/users?login=ivanovivan&password=qwerty123.

		Обоснование:
	- Ресурс несет ответственность за хранение и защиту данных своих пользователей. Они обязаны быть в безопасности.
	- Пользователи больше доверяют ресурсам с защищенным соединением по протоколу HTTPS.
	- Улучшение позиций в поисковых системах. Поисковики предоставляют приоритет ресурсам, использующим защищенный протокол HTTPS.


4. Использование HTTP методов.

Можно создать ресурс, полностью работающий через GET-запросы или любой другой метод.
Однако такой подход может привести к проблемам с безопасностью и в целом, считается неправильным.

При использовании HTTP самым авторитетным руководством являются спецификации этого протокола.

		Лучшая практика – это применение методов в соответствии с их предназначением:
	- Хотите просмотреть вакансии на hh.ru? Используйте GET.
	- Желаете зарегистрироваться? Используйте POST.
	- Хотите обновить свое резюме? Методы PUT или PATCH к Вашим услугам.
	- Желаете удалить резюме? Используйте DELETE.

Также важно соблюдать идемпотентность и безопасность методов.

		Плохие практики:
	- Игнорирование правильного использования HTTP-методов.
	- Несоблюдение идемпотентности и безопасности методов.

		Обоснование:
	- Неправильное использование методов снижает уровень безопасности ресурса и в целом не соответствует современным стандартам проектирования web-ресурсов. 
	- Идемпотентность и безопасность методов четко описана в спецификации HTTP.
	  Важно соблюдать эти характеристики методов как с технической точки зрения, так и с точки зрения современного стандарта проектирования web-ресурсов.


5. Использование разнообразных СТАТУС-КОДОВ HTTP.

Правильное использование статус-кодов на проектах помогает быстро локализовать возникшие проблемы
и выстроить эффективное общение между клиентом и сервером.

		Лучшая практика:
	- Использовать подходящий статус-код для каждой конкретной ситуации.

		Плохие практики:
	- Ограничиваться лишь несколькими базовыми статус-кодами.
	- Применять статус-коды, которые не соответствуют реальной ситуации (например, отправлять код 404 для ошибок авторизации).

		Обоснование:
	- Правильное использование статус-кодов позволяет быстро определить характер проблемы.
	  Например, код 403 указывает на проблемы с правами доступа, а 404 сообщает, что запрашиваемый ресурс не найден.
	- Статус-коды помогают определить источник проблемы — на стороне клиента или сервера.


6. ВЕРСИОНИРОВАНИЕ API.

Версионирование API — ключевая практика, которая обеспечивает стабильность и обратную совместимость при обновлениях.

		Лучшая практика:
	- Включать версию API в URL эндпоинта.
	  	Пример:
		https://example.com/v1/users
		https://example.com/v2/users

		Не лучшая практика:
	- Отсутствие версионирования в URL. Пример:
		https://example.com/users

		Обоснование:
	Представьте ситуацию: у вас есть мобильное приложение и только что вышло его обновление.
	Одна часть пользователей установила новую версию, в то время как другая осталась на старой.
	Если в вашем API произойдут изменения без версионирования, пользователи со старой версией приложения могут столкнуться с критическими ошибками. Версионирование обеспечивает обратную совместимость: пользователи с новой версией приложения будут работать с новым эндпоинтом v2, а те, кто остался на старой версии — с версией v1.


7. Пагинация, фильтрация, сортировка через query-параметры.

При разработке ресурса хорошей практикой является РАЗДЕЛЕНИЕ БОЛЬШИХ объемов информации на маленькие блоки с помощью query-параметров.
В интернет-магазинах мы часто видим разделение товаров на страницы, применение различных фильтров и т. д.,
то есть порционное предоставление информации. Это выгодно как для сервера, так и для клиента. 

		Лучшая практика:
	- Разделение больших данных на порции.
	- Использование query-параметров (например, для пагинации: ?limit=10&offset=3)
	- Сортировка (например: sort=rating&order=desc или sort=rating&order=asc)
	- Фильтрация (например: name=IPhone)

		Плохая практика:
	- Отсутствие пагинации, фильтрации или сортировки.
	- Некорректная работа пагинации, фильтрации или сортировки.

		Обоснование:
	Было бы странно заходить в интернет-магазин, открывать список товаров и видеть 5000 разнообразных и неотфильтрованных товаров.
	Неудачным решением было бы, если, открыв интернет-магазин книг и пытаясь отфильтровать их по рейтингу,
	мы бы увидели книги с максимальным рейтингом смешанными с теми, у которых рейтинга вообще нет.



=========================== ОСНОВНЫЕ ОТЛИЧИЯ REST ОТ SOAP =======================================

1) REST это архитектурный стиль без четкого стандарта и спецификации, SOAP - строгий, стандартизированный протокол.
2) REST это про гибкость, простоту и скорость, SOAP - про безопасность и строгость.
3) В REST используются разные форматы обмена данными, в SOAP - используется только формат XML.
4) REST эффективно использует протокол HTTP и базируется на нем, SOAP - может использовать различные протоколы прикладного уровня.

	Примечание:
Отсутствие стандарта и спецификации в REST является одним из ключевых недостатков по сравнению с SOAP.







