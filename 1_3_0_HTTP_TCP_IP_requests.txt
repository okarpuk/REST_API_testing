HTTP - это протокол прикладного уровня передачи данных, изначально — в виде гипертекстовых документов в формате HTML.
В настоящее время используется для передачи произвольных данных.

Модели передачи данных в сети Интернет:
- OSI - устаревшая
- TCP/IP - более современная и широко используемая


Модель TCP/IP:
1) PC -(using API)->
2) App/Site -->
3) Application Layer (HTTP, RTSP, FTP, DNS) --> на этом уровне работает большинство сетевых приложений, которые имеют свои собственные протоколы обмена информацией (например - Интернет-браузер для протокола HTTP, ftp-клиент для протокола FTP и т.д.)
4) Transport Layer (TCP, UDP, SCTP, DCCP) --> транспортные протоколы определяют, для какого именно приложения предназначены данные
5) Network Layer (IP) --> На этом уровне работают маршрутизаторы, которые перенаправляют пакеты в нужную сеть путём расчёта адреса сети по маске сети.
6) Link Layer (Ethernet, IEEE 802.11, WLAN, SLIP, Token Ring, ATM и MPLS) --> Канальный уровень описывает способ кодирования данных для передачи пакета данных на физическом уровне


Ключевые различия между TCP и UDP:

TCP:
- Надежнее
- Имеет механизм "хендшейка" или "рукопожатия": перед началом обмена данными устанавливается соединение между двумя хостами.
- Гарантирует доставку информации получателю.
- Работает медленнее, чем UDP.

UDP:
- Менее надежен, чем TCP.
- Не требует "хендшейка".
- Не гарантирует, что информация будет доставлена до конечного получателя.
- Работает быстрее, чем TCP.

Например, TCP используется для доставки сообщений от одного пользователя другому, в то время как UDP может применяться во время видеостриминга.



						****************** МЕТОДЫ HTTP ******************

HTTP поддерживает 9 методов запросов, каждый из которых выполняет определенную функцию:

- GET - запрос информации о ресурсе.
- POST - запрос на создание ресурса (например, регистрация пользователя).
- PUT - запрос на обновление ресурса (обновляет ресурс полностью).
- PATCH - запрос на обновление ресурса (частично обновляет ресурс).
- DELETE - запрос на удаление ресурса.
- OPTIONS - запрос информации о поддерживаемых методах у ресурса (в заголовке Allow представляются поддерживаемые методы).
- HEAD - запрос заголовков ресурса (аналогичен методу GET, но без получения тела ответа).
- CONNECT - преобразование соединения в прозрачный TCP/IP-туннель, например, для соединения с сайтом через SSL.
- TRACE - позволяет клиенту видеть, что происходит на каждом этапе между клиентом и сервером.

На практике чаще всего используются первые пять методов HTTP (GET, POST, PUT, PATCH, DELETE) для реализации так называемого акронима CRUD.
POST --------- Create
GET ---------- Read
PUT и PATCH -- Update
DELETE ------- Delete


						**************** ЗАПРОСЫ *****************

REQUEST - отправляемый запрос на сервер.
RESPONSE - ответ от сервера.
HEADERS - заголовки.
RESPONSE BODY - тело ответа.
REQUEST BODY - тело запроса.
URI (Uniform Resource Identifier) - полный адрес, по которому происходит обращение (например - https://www.youtube.com/watch?v=e_atyw0IDqg)
ENDPOINT - часть адреса, идущая после доменного имени (например - после .com/, наример: /watch?v=e_atyw0IDqg)
QUERY-параметры - часть URI, следующая после ? (например: ?v=e_atyw0IDqg)
URL (Uniform Resource Locator) - комбинация протокола и доменного имени. Пример: https://www.youtube.com
Cookie - небольшие фрагменты данных, которые хранятся как на стороне клиента, так и на стороне сервера, и служат в целях идентификации.


						************* HTTP REQUEST ******************

Request — это отправляемый запрос на сервер.

Cостоит из следующих частей:
1) Стартовая строка, в которой указывается:
	- Протокол и версия протокола
	- Метод запроса
	- URI
2) Request headers — заголовки со служебной, уточняющей и дополнительной информацией в формате "ключ: значение".
3) Request body — тело запроса, в котором передаются необходимые данные для внесения изменений в БД.

Опционально:
- Query-параметры могут передаваться в URI в формате "ключ=значение".
- Cookie могут передаваться в request headers в формате "ключ: значение". Это один из способов идентификации пользователя и сохранения информации о его предпочтениях.

Примечания:
- В методах GET, HEAD, OPTIONS request body не используется.
- В методе DELETE body может присутствовать, но также может и отсутствовать. Это зависит от реализации разработчика.
- В версиях HTTP 1.1 и выше заголовок Host является обязательным, и в нем указывается доменное имя. В стартовой строке указываются протокол, метод и эндпоинт.
- В стартовой строке может содержаться как абсолютный URI, так и относительный URI (только эндпоинт). Чаще всего в стартовой строке передается относительный URI (эндпоинт).
- Технически, query-параметры могут отправляться с любым методом HTTP. Чаще всего они отправляются с методом GET и, в основном, используются для фильтрации и сортировки данных.


					**************** HTTP RESPONSE *******************

Response — это ответ, который мы получаем от сервера.

Cостоит из следующих частей:
1) Стартовая строка, в которой указывается:
	- Протокол и версия протокола
	- Статус-код
	- Пояснение к статус-коду
2) Response headers — заголовки со служебной, уточняющей и дополнительной информацией в формате "ключ: значение".
3) Response body — тело ответа.

Опционально:
Cookie могут передаваться в response headers, в заголовке Set-cookie.


							********** СТАТУС-КОДЫ *******************
							
Статус-код приходит от сервера в ответ на запрос и представляет собой трехзначное число в диапазоне от 100 до 599.
Это число несет информационный характер о результате обработки запроса сервером.

В протоколе HTTP статус-коды подразделяются на пять категорий:
100-199: Информационные ответы.
200-299: Успешная обработка запроса.
300-399: Перенаправление запроса.
400-499: Ошибки клиента.
500-599: Ошибки сервера.
